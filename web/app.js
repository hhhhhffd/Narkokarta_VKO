/**
 * Telegram WebApp —Å –∫–∞—Ä—Ç–æ–π –Ω–∞ –±–∞–∑–µ Leaflet
 *
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π (Leaflet.markercluster)
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–∫
 * - –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç—É (—Ç–æ–ª—å–∫–æ —Ç–∏–ø –∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∫ —Ç–∏–ø–∞–º –º–µ—Ç–æ–∫
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram WebApp API
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–∫ –ø–æ —Ç–∏–ø—É, —Ü–≤–µ—Ç—É –∏ —Ä–∞–¥–∏—É—Å—É
 */

// ==================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====================

const CONFIG = {
    API_BASE_URL: window.location.origin || 'http://localhost:8000',
    TILE_LAYER: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
    TILE_ATTRIBUTION: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    DEFAULT_CENTER: [49.948658972761386, 82.6267031181721], // –ê—Å—Ç–∞–Ω–∞ [lat, lng] –¥–ª—è Leaflet
    DEFAULT_ZOOM: 12,
    MIN_DISTANCE_METERS: 5, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –º–µ—Ç–∫–∞–º–∏
    COLOR_MAP: {
        red: '#dc3545',
        orange: '#fd7e14',
        yellow: '#ffc107',
        green: '#28a745',
        white: '#6c757d',
        purple: '#9b59b6'  // –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    },
    TYPE_COLORS: {
        den: 'red',
        ad: 'orange',
        courier: 'yellow',
        user: 'green',
        trash: 'white'
    },
    TYPE_ICONS: {
        den: 'üèö',
        ad: 'üì¢',
        courier: 'üö∂',
        user: 'üíä',
        trash: 'üóë'
    }
};

// ==================== State ====================

const state = {
    map: null,
    markers: [],
    markerClusterGroup: null,
    accessToken: null,
    userInfo: null,
    currentPosition: null,
    tg: null,
    filters: {
        types: ['den', 'ad', 'courier', 'user', 'trash']
    }
};

// ==================== Telegram WebApp ====================

function initTelegram() {
    if (window.Telegram && window.Telegram.WebApp) {
        state.tg = window.Telegram.WebApp;
        state.tg.ready();
        state.tg.expand();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const user = state.tg.initDataUnsafe?.user;
        if (user) {
            console.log('Telegram user:', user);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å"
        state.tg.BackButton.onClick(() => {
            state.tg.close();
        });
    }
}

// ==================== –£—Ç–∏–ª–∏—Ç—ã ====================

function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
              Math.cos(œÜ1) * Math.cos(œÜ2) *
              Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
}

function findNearbyMarker(lat, lon, maxDistance = CONFIG.MIN_DISTANCE_METERS) {
    return state.markers.find(marker => {
        const distance = calculateDistance(lat, lon, marker.latitude, marker.longitude);
        return distance < maxDistance;
    });
}

// ==================== API Client ====================

class API {
    static async request(endpoint, options = {}) {
        const url = `${CONFIG.API_BASE_URL}${endpoint}`;
        const headers = {
            'Content-Type': 'application/json',
            ...options.headers
        };

        if (state.accessToken) {
            headers['Authorization'] = `Bearer ${state.accessToken}`;
        }

        try {
            const response = await fetch(url, {
                ...options,
                headers
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || 'Network error');
            }

            return await response.json();
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    }

    static async requestOTP(phone) {
        return this.request('/auth/request-otp', {
            method: 'POST',
            body: JSON.stringify({ phone })
        });
    }

    static async verifyOTP(phone, code) {
        return this.request('/auth/verify-otp', {
            method: 'POST',
            body: JSON.stringify({ phone, code })
        });
    }

    static async getMarkers(filters = {}) {
        const params = new URLSearchParams(filters);
        return this.request(`/markers?${params}`);
    }

    static async createMarker(data) {
        return this.request('/markers', {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }

    static async uploadPhoto(markerId, file) {
        const formData = new FormData();
        formData.append('photo', file);

        const url = `${CONFIG.API_BASE_URL}/markers/${markerId}/photo`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${state.accessToken}`
            },
            body: formData
        });

        if (!response.ok) {
            throw new Error('Upload failed');
        }

        return response.json();
    }

    static async getUserStats() {
        return this.request('/users/me/stats');
    }
}

// ==================== UI Helpers ====================

function showToast(message, type = 'info') {
    const container = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;

    const icons = {
        success: 'fa-check-circle',
        error: 'fa-exclamation-circle',
        info: 'fa-info-circle',
        warning: 'fa-exclamation-triangle'
    };

    toast.innerHTML = `
        <i class="fas ${icons[type]}"></i>
        <span>${message}</span>
    `;

    container.appendChild(toast);

    setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
    }, 4000);
}

function showLoader() {
    document.getElementById('loader').classList.remove('hidden');
}

function hideLoader() {
    document.getElementById('loader').classList.add('hidden');
}

function openModal(modalId) {
    document.getElementById(modalId).classList.add('active');
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('active');
}

// ==================== Map Functions ====================

async function initMap() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã...');
    try {
        // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å Leaflet
        state.map = L.map('map').setView(CONFIG.DEFAULT_CENTER, CONFIG.DEFAULT_ZOOM);

        console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π —Ç–∞–π–ª–æ–≤ OpenStreetMap
        L.tileLayer(CONFIG.TILE_LAYER, {
            attribution: CONFIG.TILE_ATTRIBUTION,
            maxZoom: 19
        }).addTo(state.map);

        console.log('‚úÖ –¢–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        state.markerClusterGroup = L.markerClusterGroup({
            maxClusterRadius: 50,
            spiderfyOnMaxZoom: true,
            showCoverageOnHover: false,
            zoomToBoundsOnClick: true
        });
        state.map.addLayer(state.markerClusterGroup);

        console.log('‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
        state.map.on('click', handleMapClick);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–∫...');
        await loadMarkers();
        console.log('‚úÖ –ú–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    state.currentPosition = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    state.map.flyTo([position.coords.latitude, position.coords.longitude], 13);
                    console.log('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
                },
                (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                }
            );
        }

        hideLoader();

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        hideLoader();
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É: ' + error.message, 'error');
    }
}

async function loadMarkers() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–∫...');

        const filters = {};

        console.log('–ó–∞–ø—Ä–æ—Å –º–µ—Ç–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
        const markers = await API.getMarkers(filters);
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ –º–µ—Ç–æ–∫: ${markers.length}`);

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        const filteredMarkers = markers.filter(m =>
            state.filters.types.includes(m.type)
        );

        console.log(`–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredMarkers.length}`);

        state.markers = filteredMarkers;
        displayMarkers(filteredMarkers);
        updateStats(filteredMarkers.length);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫:', error);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫: ' + error.message, 'error');
    }
}

function displayMarkers(markers) {
    console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${markers.length} –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ`);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –∏–∑ –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    state.markerClusterGroup.clearLayers();

    // –°–æ–∑–¥–∞—ë–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ç–∫–∏
    const createIcon = (type, color) => {
        const iconEmoji = CONFIG.TYPE_ICONS[type] || 'üìç';
        const iconColor = CONFIG.COLOR_MAP[CONFIG.TYPE_COLORS[type]] || '#999';

        return L.divIcon({
            html: `<div style="
                background-color: ${iconColor};
                width: 32px;
                height: 32px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                border: 2px solid white;
                box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            ">${iconEmoji}</div>`,
            className: 'custom-marker-icon',
            iconSize: [32, 32],
            iconAnchor: [16, 16],
            popupAnchor: [0, -16]
        });
    };

    // –°–æ–∑–¥–∞—ë–º popup –¥–ª—è –º–µ—Ç–∫–∏
    const createPopup = (marker) => {
        const typeMap = {
            den: 'üèö –ü—Ä–∏—Ç–æ–Ω',
            ad: 'üì¢ –†–µ–∫–ª–∞–º–∞',
            courier: 'üö∂ –ö—É—Ä—å–µ—Ä',
            user: 'üíä –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
            trash: 'üóë –ú—É—Å–æ—Ä'
        };

        const statusMap = {
            new: '–ù–æ–≤–∞—è',
            approved: '–û–¥–æ–±—Ä–µ–Ω–∞',
            rejected: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            resolved: '–†–µ—à–µ–Ω–∞'
        };

        return `
            <div class="marker-popup">
                <h3>${marker.title}</h3>
                ${marker.description ? `<p>${marker.description}</p>` : ''}
                <div class="marker-meta">
                    <span class="badge type">${typeMap[marker.type]}</span>
                    <span class="badge status ${marker.status}">${statusMap[marker.status]}</span>
                </div>
                <p><small>üìÖ ${new Date(marker.created_at).toLocaleString('ru')}</small></p>
                ${marker.photo_url ? `<img src="${CONFIG.API_BASE_URL}${marker.photo_url}" alt="–§–æ—Ç–æ" style="max-width: 100%; margin-top: 10px; border-radius: 5px;">` : ''}
            </div>
        `;
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
    markers.forEach(marker => {
        const leafletMarker = L.marker(
            [marker.latitude, marker.longitude],
            { icon: createIcon(marker.type, marker.color) }
        );

        leafletMarker.bindPopup(createPopup(marker), {
            maxWidth: 300,
            className: 'custom-popup'
        });

        state.markerClusterGroup.addLayer(leafletMarker);
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${markers.length} –º–µ—Ç–æ–∫ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π`);
}

function updateStats(total) {
    document.getElementById('totalMarkers').textContent = total;
}

// ==================== Auth ====================
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram WebApp

// ==================== Add Marker ====================

function showAddMarkerModal(lat, lng) {
    document.getElementById('markerLat').textContent = lat.toFixed(6);
    document.getElementById('markerLon').textContent = lng.toFixed(6);
    document.getElementById('markerType').value = 'den';

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    document.getElementById('markerAddress').value = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat.toFixed(6)}, ${lng.toFixed(6)}`;

    document.getElementById('markerDescription').value = '';
    document.getElementById('markerPhoto').value = '';

    openModal('markerModal');
}

async function handleSubmitMarker() {
    const type = document.getElementById('markerType').value;
    const address = document.getElementById('markerAddress').value.trim();
    const description = document.getElementById('markerDescription').value.trim();
    const lat = parseFloat(document.getElementById('markerLat').textContent);
    const lng = parseFloat(document.getElementById('markerLon').textContent);
    const photoFile = document.getElementById('markerPhoto').files[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const nearbyMarker = findNearbyMarker(lat, lng);
    if (nearbyMarker) {
        showToast(`–°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–µ—Ç–∫–µ (${CONFIG.MIN_DISTANCE_METERS}–º)`, 'warning');
        return;
    }

    try {
        showLoader();

        // –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É —Å –∞–¥—Ä–µ—Å–æ–º –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        const markerData = {
            latitude: lat,
            longitude: lng,
            type
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω
        if (address) {
            markerData.address = address;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        if (description) {
            markerData.description = description;
        }

        const marker = await API.createMarker(markerData);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (photoFile) {
            try {
                await API.uploadPhoto(marker.id, photoFile);
                showToast('–ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å —Ñ–æ—Ç–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!', 'success');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
                showToast('–ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'warning');
            }
        } else {
            showToast('–ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ!', 'success');
        }

        closeModal('markerModal');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        await loadMarkers();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏:', error);
        showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏: ' + error.message, 'error');
    } finally {
        hideLoader();
    }
}

function handleMapClick(e) {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (state.accessToken) {
        const lat = e.latlng.lat;
        const lng = e.latlng.lng;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–∫–∞–º
        const nearbyMarker = findNearbyMarker(lat, lng);
        if (nearbyMarker) {
            showToast(`–°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–µ—Ç–∫–µ (${CONFIG.MIN_DISTANCE_METERS}–º)`, 'warning');
            return;
        }

        showAddMarkerModal(lat, lng);
    }
}

// ==================== Filters ====================

function applyFilters() {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    const typeCheckboxes = document.querySelectorAll('input[name="type"]:checked');
    state.filters.types = Array.from(typeCheckboxes).map(cb => cb.value);

    loadMarkers();
    showToast('–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', 'success');
}

function resetFilters() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã —Ç–∏–ø–æ–≤
    document.querySelectorAll('input[name="type"]').forEach(cb => cb.checked = true);

    state.filters = {
        types: ['den', 'ad', 'courier', 'user', 'trash']
    };

    loadMarkers();
    showToast('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
}

// ==================== Event Listeners ====================

function initEventListeners() {
    // Modals
    document.querySelectorAll('.modal-close').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            modal.classList.remove('active');
        });
    });

    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
            }
        });
    });

    // Add Marker (–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ Telegram)
    document.getElementById('submitMarker').addEventListener('click', handleSubmitMarker);

    // Filters
    document.getElementById('applyFilters').addEventListener('click', applyFilters);
    document.getElementById('resetFilters').addEventListener('click', resetFilters);

    // Sidebar
    document.getElementById('toggleSidebar').addEventListener('click', () => {
        document.getElementById('sidebar').classList.toggle('closed');
    });
    document.getElementById('closeSidebar').addEventListener('click', () => {
        document.getElementById('sidebar').classList.add('closed');
    });

    // My Location
    document.getElementById('myLocation').addEventListener('click', () => {
        if (state.currentPosition) {
            state.map.flyTo([state.currentPosition.lat, state.currentPosition.lng], 15);
        } else {
            showToast('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'warning');
        }
    });
}

// ==================== Initialization ====================

async function init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp...');
    console.log('API URL:', CONFIG.API_BASE_URL);

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        console.log('1/4 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...');
        initTelegram();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Telegram WebApp initData
        console.log('2/4 –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Telegram...');
        if (state.tg && state.tg.initData) {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram initData
            console.log('‚úÖ Telegram WebApp –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        console.log('3/4 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
        await initMap();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        console.log('4/4 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
        initEventListeners();

        setTimeout(hideLoader, 500);

        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        hideLoader();
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message, 'error');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
} else {
    init();
}
