"""
Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ù–∞—Ä–∫–æ–∫–∞—Ä—Ç–æ–π.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
- –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
- –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç–æ–∫ —Ä—è–¥–æ–º
- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ç–æ–∫

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
pip install python-telegram-bot httpx

–ó–∞–ø—É—Å–∫:
python telegram_bot.py
"""
import logging
import os

from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import httpx


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")
WEBAPP_URL = os.getenv("WEBAPP_URL", "http://localhost:8000/web/index.html")


# HTTP –∫–ª–∏–µ–Ω—Ç
http_client = httpx.AsyncClient(timeout=30.0)

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ü–µ–Ω—Ç—Ä–æ–º –∫–∞—Ä—Ç—ã)
DEFAULT_COORDINATES = {
    'lat': 49.948658972761386,
    'lon': 82.6267031181721
}


# ==================== –ì–µ–æ–∫–æ–¥–∏–Ω–≥ ====================

async def geocode_address(address: str) -> dict:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Nominatim API (OpenStreetMap)

    Args:
        address: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å

    Returns:
        dict —Å –∫–ª—é—á–∞–º–∏ 'lat', 'lon', 'success'
    """
    try:
        # Nominatim API - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –æ—Ç OpenStreetMap
        url = "https://nominatim.openstreetmap.org/search"
        params = {
            'q': address,
            'format': 'json',
            'limit': 1,
            'countrycodes': 'kz',  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–æ–º
            'accept-language': 'ru'
        }
        headers = {
            'User-Agent': 'NarcoMap-Telegram-Bot/1.0'  # Nominatim —Ç—Ä–µ–±—É–µ—Ç User-Agent
        }

        response = await http_client.get(url, params=params, headers=headers, timeout=10.0)

        if response.status_code == 200:
            results = response.json()
            if results and len(results) > 0:
                location = results[0]
                return {
                    'lat': float(location['lat']),
                    'lon': float(location['lon']),
                    'success': True,
                    'display_name': location.get('display_name', address)
                }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {e}")

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    return {
        'lat': DEFAULT_COORDINATES['lat'],
        'lon': DEFAULT_COORDINATES['lon'],
        'success': False,
        'display_name': address
    }


# ==================== API –§—É–Ω–∫—Ü–∏–∏ ====================

async def api_request_otp(phone: str) -> dict:
    """–ó–∞–ø—Ä–æ—Å OTP –∫–æ–¥–∞"""
    try:
        response = await http_client.post(
            f"{API_BASE_URL}/auth/request-otp",
            json={"phone": phone}
        )
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ OTP: {e}")
        return {"success": False, "message": str(e)}


async def api_verify_otp(phone: str, code: str) -> dict:
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP"""
    try:
        response = await http_client.post(
            f"{API_BASE_URL}/auth/verify-otp",
            json={"phone": phone, "code": code}
        )
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP: {e}")
        return {}


async def api_create_marker(token: str, marker_data: dict) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏"""
    try:
        response = await http_client.post(
            f"{API_BASE_URL}/markers",
            headers={"Authorization": f"Bearer {token}"},
            json=marker_data
        )
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏: {e}")
        return {}


async def api_get_markers(filters: dict) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫"""
    try:
        response = await http_client.get(
            f"{API_BASE_URL}/markers",
            params=filters
        )
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫: {e}")
        return []


async def api_upload_photo(token: str, marker_id: int, photo_path: str) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ç–∫–∏"""
    try:
        with open(photo_path, 'rb') as f:
            files = {'photo': f}
            response = await http_client.post(
                f"{API_BASE_URL}/markers/{marker_id}/photo",
                headers={"Authorization": f"Bearer {token}"},
                files=files
            )
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return {}


async def api_get_user_stats(token: str) -> dict:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = await http_client.get(
            f"{API_BASE_URL}/users/me/stats",
            headers={"Authorization": f"Bearer {token}"}
        )
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


# ==================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====================

def get_main_keyboard(is_authenticated: bool = False):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    if not is_authenticated:
        keyboard = [
            [KeyboardButton("üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))],
            [KeyboardButton("üîë –í–æ–π—Ç–∏", request_contact=True)]
        ]
    else:
        keyboard = [
            [KeyboardButton("üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))],
            [KeyboardButton("üìç –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É")],  # –£–±—Ä–∞–ª–∏ request_location=True
            [KeyboardButton("üó∫ –ú–µ—Ç–∫–∏ —Ä—è–¥–æ–º")],
            [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("üö™ –í—ã–π—Ç–∏")]
        ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_marker_creation_method_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="method_geo")
        ],
        [
            InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", callback_data="method_manual")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_marker_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Ç–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üèö –ü—Ä–∏—Ç–æ–Ω", callback_data="type_den"),
            InlineKeyboardButton("üì¢ –†–µ–∫–ª–∞–º–∞", callback_data="type_ad")
        ],
        [
            InlineKeyboardButton("üö∂ –ö—É—Ä—å–µ—Ä", callback_data="type_courier"),
            InlineKeyboardButton("üíä –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", callback_data="type_user")
        ],
        [
            InlineKeyboardButton("üóë –ú—É—Å–æ—Ä", callback_data="type_trash")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)




# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    is_auth = context.user_data.get('access_token') is not None

    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞—Ä–∫–æ–∫–∞—Ä—Ç—É - —Å–µ—Ä–≤–∏—Å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ—á–µ–∫.

{'üîì –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.' if is_auth else 'üîí –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üîë –í–æ–π—Ç–∏"'}

üó∫ **–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–∫–∞–º–∏
üìç –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–µ—Ç–∫–∏ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
üó∫ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –º–µ—Ç–∫–∏ —Ä—è–¥–æ–º
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–í—Å–µ –º–µ—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ!
"""

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard(is_auth),
        parse_mode='Markdown'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–∫–∞–º–∏ (WebApp)
üìç –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
üó∫ –ú–µ—Ç–∫–∏ —Ä—è–¥–æ–º - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ—Ç–∫–∏ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –í–∞—à–∏ –º–µ—Ç–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

*–¢–∏–ø—ã –º–µ—Ç–æ–∫:*
üî¥ –ü—Ä–∏—Ç–æ–Ω - –ú–µ—Å—Ç–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è/–ø—Ä–æ–¥–∞–∂–∏
üü† –†–µ–∫–ª–∞–º–∞ - –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞—Ö
üü° –ö—É—Ä—å–µ—Ä - –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å –∏ —Ç–æ—á–∫–∏ –≤—Å—Ç—Ä–µ—á–∏
üü¢ –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ - –ú–µ—Å—Ç–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
‚ö™Ô∏è –ú—É—Å–æ—Ä - –®–ø—Ä–∏—Ü—ã –∏ –¥—Ä—É–≥–æ–π –º—É—Å–æ—Ä

*–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π:*
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–∫
‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –º–µ—Ç–∫–∏ –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç–µ

*–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏:*
1. –ù–∞–∂–º–∏—Ç–µ "üìç –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É" –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∫–∏ (—Ü–≤–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
4. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
5. –ü–æ –∂–µ–ª–∞–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ
6. –ú–µ—Ç–∫–∞ —Å—Ä–∞–∑—É –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ!

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/map - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ /support
"""

    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )


async def map_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /map - –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É"""
    keyboard = [
        [InlineKeyboardButton("üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üó∫ *–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–∫–∞–º–∏.\n\n"
        "–ù–∞ –∫–∞—Ä—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–∫–∏ –∫–ª–∏–∫–æ–º\n"
        "‚Ä¢ –í–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è\n\n"
        "–ö–∞—Ä—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é - –±–ª–∏–∑–∫–∏–µ –º–µ—Ç–∫–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    context.user_data.clear()
    await update.message.reply_text(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
        reply_markup=get_main_keyboard(False)
    )


# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ====================

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)"""
    contact = update.message.contact

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if contact.user_id != update.effective_user.id:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
        return

    phone = f"+{contact.phone_number}"

    # –ó–∞–ø—Ä–æ—Å OTP
    await update.message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...")

    result = await api_request_otp(phone)

    if result.get("success"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['phone'] = phone
        context.user_data['awaiting'] = 'otp'

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        code_text = f"\n\nüî¢ –ö–æ–¥ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏): `{result.get('code')}`" if result.get('code') else ""

        await update.message.reply_text(
            f"‚úÖ {result['message']}{code_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start",
            reply_markup=get_main_keyboard(False)
        )


async def handle_otp_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OTP –∫–æ–¥–∞"""
    if context.user_data.get('awaiting') != 'otp':
        return

    phone = context.user_data.get('phone')
    code = update.message.text.strip()

    # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP
    await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥...")

    result = await api_verify_otp(phone, code)

    if result.get('access_token'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        context.user_data['access_token'] = result['access_token']
        context.user_data['refresh_token'] = result['refresh_token']
        context.user_data['user_id'] = result['user_id']
        context.user_data['role'] = result['role']
        context.user_data['awaiting'] = None

        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
            f"üë§ ID: {result['user_id']}\n"
            f"üé≠ –†–æ–ª—å: {result['role']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π.",
            reply_markup=get_main_keyboard(True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞"
        )


# ==================== –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ ====================

async def handle_location_for_marker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º"""
    token = context.user_data.get('access_token')

    if not token:
        await update.message.reply_text(
            "üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: –Ω–∞–∂–º–∏—Ç–µ üîë –í–æ–π—Ç–∏",
            reply_markup=get_main_keyboard(False)
        )
        return

    location = update.message.location
    lat = location.latitude
    lon = location.longitude

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    awaiting = context.user_data.get('awaiting')
    mode = context.user_data.get('location_mode', 'create')

    if mode == 'nearby':
        # –ò—â–µ–º –º–µ—Ç–∫–∏ —Ä—è–¥–æ–º
        context.user_data['location_mode'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        return await handle_location_for_nearby_internal(update, context, lat, lon)

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏
    if awaiting == 'marker_location':
        context.user_data['marker_lat'] = lat
        context.user_data['marker_lon'] = lon

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        auto_address = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
        context.user_data['marker_address'] = auto_address
        context.user_data['awaiting'] = 'marker_type'

        await update.message.reply_text(
            f"‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"üìç –®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
            f"üìç –î–æ–ª–≥–æ—Ç–∞: {lon:.6f}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∫–∏:",
            reply_markup=get_marker_type_keyboard()
        )
    else:
        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        context.user_data['marker_lat'] = lat
        context.user_data['marker_lon'] = lon
        context.user_data['awaiting'] = 'marker_type'

        await update.message.reply_text(
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:\n"
            f"–®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
            f"–î–æ–ª–≥–æ—Ç–∞: {lon:.6f}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∫–∏:",
            reply_markup=get_marker_type_keyboard()
        )


async def handle_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    context.user_data['awaiting'] = None
    context.user_data['creation_method'] = None


async def handle_creation_method_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        return await handle_cancel_callback(update, context)

    if query.data == "method_geo":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        context.user_data['creation_method'] = 'geo'
        context.user_data['awaiting'] = 'marker_location'

        await query.edit_message_text(
            "üìç *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'\n"
            "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* Telegram –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.",
            parse_mode='Markdown'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
        keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [KeyboardButton("‚úçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await query.message.reply_text(
            "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
            "–∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:",
            reply_markup=keyboard
        )

    elif query.data == "method_manual":
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        context.user_data['creation_method'] = 'manual'
        context.user_data['awaiting'] = 'marker_coordinates'

        await query.edit_message_text(
            "‚úçÔ∏è *–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`–ê—Å—Ç–∞–Ω–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5`\n"
            "`—É–ª. –ê–±–∞—è 15, 3 —ç—Ç–∞–∂`\n\n"
            "üí° –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
            "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`51.1694, 71.4491`",
            parse_mode='Markdown'
        )


async def handle_marker_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Ç–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        return await handle_cancel_callback(update, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    marker_type = query.data.replace("type_", "")
    context.user_data['marker_type'] = marker_type

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É
    type_to_color = {
        "den": "red",
        "ad": "orange",
        "courier": "yellow",
        "user": "green",
        "trash": "white"
    }
    context.user_data['marker_color'] = type_to_color.get(marker_type, "yellow")
    context.user_data['awaiting'] = 'marker_description'

    type_names = {
        "den": "üèö –ü—Ä–∏—Ç–æ–Ω",
        "ad": "üì¢ –†–µ–∫–ª–∞–º–∞",
        "courier": "üö∂ –ö—É—Ä—å–µ—Ä",
        "user": "üíä –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
        "trash": "üóë –ú—É—Å–æ—Ä"
    }

    color_names = {
        "red": "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ",
        "orange": "üü† –í—ã—Å–æ–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "yellow": "üü° –°—Ä–µ–¥–Ω—è—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "green": "üü¢ –ù–∏–∑–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "white": "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    }

    marker_color = context.user_data['marker_color']
    lat = context.user_data.get('marker_lat')
    lon = context.user_data.get('marker_lon')
    address = context.user_data.get('marker_address', '–ù–µ —É–∫–∞–∑–∞–Ω')

    await query.edit_message_text(
        f"‚úÖ –¢–∏–ø: {type_names.get(marker_type, marker_type)}\n"
        f"‚úÖ –û–ø–∞—Å–Ω–æ—Å—Ç—å: {color_names.get(marker_color, marker_color)} (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"
        f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}\n"
        f"üì´ –ê–¥—Ä–µ—Å: {address}\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )


async def handle_manual_coordinates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ –∞–¥—Ä–µ—Å–∞"""
    if context.user_data.get('awaiting') != 'marker_coordinates':
        return

    text = update.message.text.strip()

    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: lat, lon)
    try:
        parts = text.replace(',', ' ').split()
        if len(parts) >= 2:
            lat = float(parts[0])
            lon = float(parts[1])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if -90 <= lat <= 90 and -180 <= lon <= 180:
                context.user_data['marker_lat'] = lat
                context.user_data['marker_lon'] = lon
                context.user_data['marker_address'] = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
                context.user_data['awaiting'] = 'marker_type'

                await update.message.reply_text(
                    f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã!\n\n"
                    f"üìç –®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
                    f"üìç –î–æ–ª–≥–æ—Ç–∞: {lon:.6f}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∫–∏:",
                    reply_markup=get_marker_type_keyboard()
                )
                return
    except (ValueError, IndexError):
        pass

    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏–Ω–≥
    await update.message.reply_text(
        f"üì´ –ê–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç: {text}\n\n"
        f"üîç –ò—â—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞...",
    )

    # –ì–µ–æ–∫–æ–¥–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞
    geocode_result = await geocode_address(text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Ç–∫–∏
    context.user_data['marker_lat'] = geocode_result['lat']
    context.user_data['marker_lon'] = geocode_result['lon']
    context.user_data['marker_address'] = text
    context.user_data['awaiting'] = 'marker_type'

    if geocode_result['success']:
        # –£—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        await update.message.reply_text(
            f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
            f"üìç –®–∏—Ä–æ—Ç–∞: {geocode_result['lat']:.6f}\n"
            f"üìç –î–æ–ª–≥–æ—Ç–∞: {geocode_result['lon']:.6f}\n"
            f"üì´ –ê–¥—Ä–µ—Å: {text}\n"
            f"üó∫ –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {geocode_result['display_name']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∫–∏:",
            reply_markup=get_marker_type_keyboard()
        )
    else:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n"
            f"üìç –®–∏—Ä–æ—Ç–∞: {geocode_result['lat']:.6f}\n"
            f"üìç –î–æ–ª–≥–æ—Ç–∞: {geocode_result['lon']:.6f}\n"
            f"üì´ –ê–¥—Ä–µ—Å: {text}\n\n"
            f"üí° *–°–æ–≤–µ—Ç:* –£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ç–∫–∏:",
            parse_mode='Markdown',
            reply_markup=get_marker_type_keyboard()
        )




async def handle_marker_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –º–µ—Ç–∫–∏"""
    if context.user_data.get('awaiting') != 'marker_address':
        return

    address = update.message.text
    context.user_data['marker_address'] = address
    context.user_data['awaiting'] = 'marker_description'

    await update.message.reply_text(
        f"‚úÖ –ê–¥—Ä–µ—Å: {address}\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )


async def handle_marker_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç–∫–∏"""
    if context.user_data.get('awaiting') != 'marker_description':
        return

    description = update.message.text if update.message.text != '/skip' else None
    token = context.user_data.get('access_token')

    # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É
    await update.message.reply_text("‚è≥ –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É...")

    marker_data = {
        "title": f"–ú–µ—Ç–∫–∞ –æ—Ç {update.effective_user.first_name}",
        "address": context.user_data.get('marker_address'),
        "description": description,
        "latitude": context.user_data['marker_lat'],
        "longitude": context.user_data['marker_lon'],
        "type": context.user_data['marker_type'],
        "color": context.user_data['marker_color']
    }

    result = await api_create_marker(token, marker_data)

    if result.get('id'):
        context.user_data['last_marker_id'] = result['id']
        context.user_data['awaiting'] = 'marker_photo_optional'

        type_emoji = {"den": "üèö", "ad": "üì¢", "courier": "üö∂", "user": "üíä", "trash": "üóë"}
        color_emoji = {"red": "üî¥", "orange": "üü†", "yellow": "üü°", "green": "üü¢", "white": "‚ö™Ô∏è"}

        await update.message.reply_text(
            f"‚úÖ –ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å—Ä–∞–∑—É –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞ –∫–∞—Ä—Ç–µ!\n\n"
            f"üÜî ID: {result['id']}\n"
            f"{type_emoji.get(result['type'], 'üìç')} –¢–∏–ø: {result['type']}\n"
            f"{color_emoji.get(result['color'], '‚ö™Ô∏è')} –û–ø–∞—Å–Ω–æ—Å—Ç—å: {result['color']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞\n\n"
            f"üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip",
            reply_markup=get_main_keyboard(True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç\n"
            "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–æ–π –º–µ—Ç–∫–µ\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_main_keyboard(True)
        )

    context.user_data['awaiting'] = None


async def handle_marker_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ç–∫–∏"""
    if not context.user_data.get('last_marker_id'):
        return

    token = context.user_data.get('access_token')
    marker_id = context.user_data['last_marker_id']

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    file = await photo.get_file()

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_path = f"/tmp/marker_{marker_id}_{photo.file_id}.jpg"
    await file.download_to_drive(photo_path)

    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    result = await api_upload_photo(token, marker_id, photo_path)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(photo_path)

    if result.get('id'):
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –º–µ—Ç–∫–µ!\n\n"
            "–ú–µ—Ç–∫–∞ —É–∂–µ –≤–∏–¥–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ.",
            reply_markup=get_main_keyboard(True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ\n\n"
            "–ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ, –Ω–æ —É–∂–µ –≤–∏–¥–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ.",
            reply_markup=get_main_keyboard(True)
        )

    context.user_data['last_marker_id'] = None


async def skip_photo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    await update.message.reply_text(
        "‚úÖ –ú–µ—Ç–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ",
        reply_markup=get_main_keyboard(True)
    )
    context.user_data['last_marker_id'] = None


# ==================== –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç–æ–∫ ====================

async def handle_location_for_nearby_internal(update: Update, context: ContextTypes.DEFAULT_TYPE, lat: float, lon: float):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–∫ —Ä—è–¥–æ–º"""
    await update.message.reply_text("üîç –ò—â–µ–º –º–µ—Ç–∫–∏ —Ä—è–¥–æ–º...")

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫–∏
    markers = await api_get_markers({
        "center_lat": lat,
        "center_lon": lon,
        "radius_km": 5
    })

    if not markers:
        await update.message.reply_text(
            "üì≠ –ú–µ—Ç–æ–∫ —Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—Ä–∞–¥–∏—É—Å 5 –∫–º)",
            reply_markup=get_main_keyboard(True)
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    type_emoji = {"den": "üèö", "ad": "üì¢", "courier": "üö∂", "user": "üíä", "trash": "üóë"}
    color_emoji = {"red": "üî¥", "orange": "üü†", "yellow": "üü°", "green": "üü¢", "white": "‚ö™Ô∏è"}

    message = f"üó∫ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫: {len(markers)}\n\n"

    for i, marker in enumerate(markers[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        message += (
            f"{i}. {type_emoji.get(marker['type'], 'üìç')} *{marker['title']}*\n"
            f"   {color_emoji.get(marker['color'], '‚ö™Ô∏è')} {marker['type']} ‚Ä¢ {marker['color']}\n"
            f"   üìç [{marker['latitude']:.5f}, {marker['longitude']:.5f}](https://www.google.com/maps?q={marker['latitude']},{marker['longitude']})\n"
        )

        if marker.get('description'):
            desc = marker['description'][:50] + "..." if len(marker['description']) > 50 else marker['description']
            message += f"   üí¨ {desc}\n"

        message += "\n"

    if len(markers) > 10:
        message += f"_...–∏ –µ—â—ë {len(markers) - 10} –º–µ—Ç–æ–∫_\n"

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=get_main_keyboard(True)
    )


# ==================== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ====================

async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    token = context.user_data.get('access_token')

    if not token:
        await update.message.reply_text(
            "üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å",
            reply_markup=get_main_keyboard(False)
        )
        return

    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

    stats = await api_get_user_stats(token)

    if stats:
        await update.message.reply_text(
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë§ ID: `{stats['user_id']}`\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: `{stats['phone']}`\n"
            f"üé≠ –†–æ–ª—å: {stats['role']}\n\n"
            f"üìç –í—Å–µ–≥–æ –º–µ—Ç–æ–∫: *{stats['total_markers']}*\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {stats['today_activities']}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {stats['daily_limit_remaining']}\n",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard(True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_main_keyboard(True)
        )


# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ====================

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    awaiting = context.user_data.get('awaiting')

    if awaiting == 'otp':
        return await handle_otp_code(update, context)
    elif awaiting == 'marker_coordinates':
        return await handle_manual_coordinates(update, context)
    elif awaiting == 'marker_address':
        return await handle_marker_address(update, context)
    elif awaiting == 'marker_description':
        return await handle_marker_description(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if "–ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É" in text.lower():
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        context.user_data['creation_method'] = 'manual'
        context.user_data['awaiting'] = 'marker_coordinates'

        await update.message.reply_text(
            "‚úçÔ∏è *–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`–ê—Å—Ç–∞–Ω–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5`\n"
            "`—É–ª. –ê–±–∞—è 15, 3 —ç—Ç–∞–∂`\n\n"
            "üí° –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
            "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`51.1694, 71.4491`",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard(True)
        )
        return

    if "—Ä—è–¥–æ–º" in text.lower():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º "–ø–æ–∏—Å–∫ —Ä—è–¥–æ–º" –∏ –ø—Ä–æ—Å–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        context.user_data['location_mode'] = 'nearby'
        await update.message.reply_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Ç–∫–∏ —Ä—è–¥–æ–º",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    elif "—Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É" in text.lower():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        token = context.user_data.get('access_token')
        if not token:
            await update.message.reply_text(
                "üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: –Ω–∞–∂–º–∏—Ç–µ üîë –í–æ–π—Ç–∏",
                reply_markup=get_main_keyboard(False)
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏
        await update.message.reply_text(
            "üìç *–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏:",
            reply_markup=get_marker_creation_method_keyboard(),
            parse_mode='Markdown'
        )
    elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text.lower():
        return await handle_stats(update, context)
    elif "–ø–æ–º–æ—â—å" in text.lower():
        return await help_command(update, context)
    elif "–≤—ã–π—Ç–∏" in text.lower():
        return await logout_command(update, context)
    else:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )


# ==================== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export TELEGRAM_BOT_TOKEN='your-token-here'")
        return

    print(f"ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üì° API: {API_BASE_URL}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("map", map_command))
    application.add_handler(CommandHandler("logout", logout_command))
    application.add_handler(CommandHandler("skip", skip_photo_command))

    # –ö–æ–Ω—Ç–∞–∫—Ç (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
    application.add_handler(MessageHandler(filters.LOCATION, handle_location_for_marker))

    # –§–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, handle_marker_photo))

    # Callback queries (inline –∫–Ω–æ–ø–∫–∏)
    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏
    application.add_handler(CallbackQueryHandler(
        handle_creation_method_callback,
        pattern="^method_"
    ))

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Ç–∫–∏
    application.add_handler(CallbackQueryHandler(
        handle_marker_type_callback,
        pattern="^type_"
    ))

    # –û—Ç–º–µ–Ω–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ callback
    application.add_handler(CallbackQueryHandler(
        handle_cancel_callback,
        pattern="^cancel$"
    ))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_text
    ))

    # –ó–∞–ø—É—Å–∫
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
